//////////////////////////////////////////////////////////////////////////
//////////////////         notorious.cxx       ///////////////////////////
//////////////////////////////////////////////////////////////////////////
////////////////           PSOPT  Example             ////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////// Title:  Bock's notorious parameter estimation problem ///////////
//////// Last modified: 08 April 2011                     ////////////////
//////// Reference:     Schittkowskit (2002)     	      ////////////////
//////// (See PSOPT handbook for full reference)           ///////////////
//////////////////////////////////////////////////////////////////////////
////////     Copyright (c) Victor M. Becerra, 2009        ////////////////
//////////////////////////////////////////////////////////////////////////
//////// This is part of the PSOPT software library, which ///////////////
//////// is distributed under the terms of the GNU Lesser ////////////////
//////// General Public License (LGPL)                    ////////////////
//////////////////////////////////////////////////////////////////////////

#include "psopt.h"

//////////////////////////////////////////////////////////////////////////
///////////////////  Define the observation function //////////
//////////////////////////////////////////////////////////////////////////


DMatrix tobs_global;
DMatrix u_global;


void  observation_function( adouble* observations,
                            adouble* states, adouble* controls,
                            adouble* parameters, adouble& time, int k,
                            adouble* xad, int iphase, Workspace* workspace)
{

      observations[ CINDEX(1) ] = states[ CINDEX(1) ];
      observations[ CINDEX(2) ] = states[ CINDEX(2) ];
}




//////////////////////////////////////////////////////////////////////////
///////////////////  Define the DAE's ////////////////////////////////////
//////////////////////////////////////////////////////////////////////////


void dae(adouble* derivatives, adouble* path, adouble* states,
         adouble* controls, adouble* parameters, adouble& time,
         adouble* xad, int iphase, Workspace* workspace)
{

   adouble x1 = states[ CINDEX(1) ];
   adouble x2 = states[ CINDEX(2) ];


   adouble p  = parameters[ CINDEX(1) ];
   adouble t  = time;

   double mu = 60.0;

   derivatives[CINDEX(1)] =  x2;
   derivatives[CINDEX(2)] =  mu*mu*x1 - (mu*mu + p*p)*sin(p*t);


}

////////////////////////////////////////////////////////////////////////////
///////////////////  Define the events function ////////////////////////////
////////////////////////////////////////////////////////////////////////////

void events(adouble* e, adouble* initial_states, adouble* final_states,
            adouble* parameters,adouble& t0, adouble& tf, adouble* xad,
            int iphase, Workspace* workspace)
{

   e[ 0 ] =  initial_states[0];
   e[ 1 ] =  initial_states[1];


}


///////////////////////////////////////////////////////////////////////////
///////////////////  Define the phase linkages function ///////////////////
///////////////////////////////////////////////////////////////////////////

void linkages( adouble* linkages, adouble* xad, Workspace* workspace)
{
  // No linkages as this is a single phase problem
}


////////////////////////////////////////////////////////////////////////////
///////////////////  Define the main routine ///////////////////////////////
////////////////////////////////////////////////////////////////////////////

int main(void)
{
   int nobs =200;

   // Generate true solution at sampling points and add noise

   double sigma = 0.05;

   DMatrix theta, y1m, y2m, ym;

   theta = randu(1,nobs);

   sort(theta);

   y1m = sin( pi* theta ) + sigma*randn(1,nobs);

   y2m = pi*cos( pi*theta ) + sigma*randn(1,nobs);


////////////////////////////////////////////////////////////////////////////
///////////////////  Declare key structures ////////////////////////////////
////////////////////////////////////////////////////////////////////////////

    Alg  algorithm;
    Sol  solution;
    Prob problem;

////////////////////////////////////////////////////////////////////////////
///////////////////  Register problem name  ////////////////////////////////
////////////////////////////////////////////////////////////////////////////

    problem.name          		= "Bocks notorious parameter estimation problem";
    problem.outfilename                 = "notorious.txt";

////////////////////////////////////////////////////////////////////////////
////////////  Define problem level constants & do level 1 setup ////////////
////////////////////////////////////////////////////////////////////////////

    problem.nphases   			= 1;
    problem.nlinkages                   = 0;

    psopt_level1_setup(problem);


/////////////////////////////////////////////////////////////////////////////
/////////   Define phase related information & do level 2 setup /////////////
/////////////////////////////////////////////////////////////////////////////

    problem.phases(1).nstates   		= 2;
    problem.phases(1).ncontrols 		= 0;
    problem.phases(1).nevents   		= 2;
    problem.phases(1).npath     		= 0;
    problem.phases(1).nparameters        	= 1;
    problem.phases(1).nodes    		    	= "[80]";
    problem.phases(1).nobserved                 = 2;
    problem.phases(1).nsamples                  = nobs;


    psopt_level2_setup(problem, algorithm);

////////////////////////////////////////////////////////////////////////////
////////////  Enter estimation information                      ////////////
////////////////////////////////////////////////////////////////////////////


    problem.phases(1).observation_nodes      = (theta);
    problem.phases(1).observations           = (y1m && y2m);



////////////////////////////////////////////////////////////////////////////
///////////////////  Enter problem bounds information //////////////////////
////////////////////////////////////////////////////////////////////////////


    problem.phases(1).bounds.lower.states(1) =  -10.0;
    problem.phases(1).bounds.lower.states(2) =  -100.0;



    problem.phases(1).bounds.upper.states(1) =  10.0;
    problem.phases(1).bounds.upper.states(2) =  100.0;


    problem.phases(1).bounds.lower.parameters(1) =  -10.0;
    problem.phases(1).bounds.upper.parameters(1) =   10.0;

    problem.phases(1).bounds.lower.events(1) =  0.0;
    problem.phases(1).bounds.upper.events(1) =  0.0;

    problem.phases(1).bounds.lower.events(2) =  pi;
    problem.phases(1).bounds.upper.events(2) =  pi;



    problem.phases(1).bounds.lower.StartTime    = 0.0;
    problem.phases(1).bounds.upper.StartTime    = 0.0;

    problem.phases(1).bounds.lower.EndTime      = 1.0;
    problem.phases(1).bounds.upper.EndTime      = 1.0;

////////////////////////////////////////////////////////////////////////////
///////////////////  Register problem functions  ///////////////////////////
////////////////////////////////////////////////////////////////////////////

    problem.dae 		= &dae;
    problem.events 		= &events;
    problem.linkages		= &linkages;
    problem.observation_function = & observation_function;

////////////////////////////////////////////////////////////////////////////
///////////////////  Define & register initial guess ///////////////////////
////////////////////////////////////////////////////////////////////////////

    int nnodes = problem.phases(1).nodes(1);

    DMatrix state_guess;
    state_guess = zeros(2,nnodes);

    problem.phases(1).guess.states         = state_guess;
    problem.phases(1).guess.time           = linspace(0.0, 1.0, nnodes);
    problem.phases(1).guess.parameters     = 0.0;


////////////////////////////////////////////////////////////////////////////
///////////////////  Enter algorithm options  //////////////////////////////
////////////////////////////////////////////////////////////////////////////

    algorithm.nlp_method                  = "IPOPT";
    algorithm.scaling                     = "automatic";
    algorithm.derivatives                 = "automatic";
    algorithm.collocation_method          = "trapezoidal";
    algorithm.nlp_iter_max                =  200;
    algorithm.nlp_tolerance               = 1.e-4;
//    algorithm.mesh_refinement             = "automatic";
//    algorithm.ode_tolerance               = 1.e-6;



////////////////////////////////////////////////////////////////////////////
///////////////////  Now call PSOPT to solve the problem   //////////////////
////////////////////////////////////////////////////////////////////////////

    int ntrials = 1;

    Sol best_solution;
    double best_cost = inf;

    for(int i=1; i<=ntrials;i++) {
       int j;
       double dpj, r;

       for(j=1;j<=problem.phases(1).nparameters;j++) {
          r = (randu(1,1))(1);
          dpj = problem.phases(1).bounds.upper.parameters(j) - problem.phases(1).bounds.lower.parameters(j);
          problem.phases(1).guess.parameters(j) = problem.phases(1).bounds.lower.parameters(j) + r*dpj;
       }

       psopt(solution, problem, algorithm);

       if (solution.get_cost() < best_cost ) {
             best_solution = solution;
             best_cost = solution.get_cost();
       }

    }

    solution= best_solution;

////////////////////////////////////////////////////////////////////////////
///////////////////  Declare DMatrix objects to store results //////////////
////////////////////////////////////////////////////////////////////////////

    DMatrix states, x1, x2, p, t;


////////////////////////////////////////////////////////////////////////////
///////////  Extract relevant variables from solution structure   //////////
////////////////////////////////////////////////////////////////////////////

    states = solution.get_states_in_phase(1);
    t      = solution.get_time_in_phase(1);
    p      = solution.get_parameters_in_phase(1);
    x1     = states(1,colon());
    x2     = states(2,colon());


////////////////////////////////////////////////////////////////////////////
///////////  Save solution data to files if desired ////////////////////////
////////////////////////////////////////////////////////////////////////////

    states.Save("states.dat");
    t.Save("t.dat");
    p.Print("Estimated parameter");
    Abs(p-pi).Print("Parameter error");


////////////////////////////////////////////////////////////////////////////
///////////  Plot some results if desired (requires gnuplot) ///////////////
////////////////////////////////////////////////////////////////////////////

    plot(theta,ym(1,colon()),t,x1,problem.name, "time (s)", "observed x1", "x1m x1");
    plot(theta,ym(2,colon()),t,x2,problem.name, "time (s)", "observed x2", "x2m x2");



}

////////////////////////////////////////////////////////////////////////////
///////////////////////      END OF FILE     ///////////////////////////////
////////////////////////////////////////////////////////////////////////////
